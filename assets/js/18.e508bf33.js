(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{523:function(a,t,e){"use strict";e.r(t);var n=e(30),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"java线程通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java线程通信"}},[a._v("#")]),a._v(" java线程通信：")]),a._v(" "),e("p",[a._v("线程之间的通信机制有两种：==共享内存和消息传递==。")]),a._v(" "),e("p",[a._v("在共享内存的并发模型里，线程之间共享程序的公共状态，通过写-读内存中的公共状态\n进行隐式通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过发送消息来显式进行通信。")]),a._v(" "),e("p",[a._v("同步是指程序中用于控制不同线程间操作发生相对顺序的机制。在共享内存并发模型\n里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。\n在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。\nJava的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对\n程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题")]),a._v(" "),e("p",[a._v("在Java中，所有实例域、静态域和数组元素都存储在堆内存中，堆内存在线程之间共享\n。局部变量（Local Variables），方法定义参数（Java语言规范称之为Formal Method Parameters）和异常处理器参数（ExceptionHandlerParameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。")]),a._v(" "),e("p",[a._v("Java线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享\n变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（MainMemory）中，每个线程都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。")])])}),[],!1,null,null,null);t.default=r.exports}}]);