(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{523:function(a,s,e){"use strict";e.r(s);var n=e(22),t=Object(n.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq_41257358/article/details/122352397",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍：")]),a._v(" "),e("p",[a._v("ThreadLocal是一个保存线程局部变量的工具，每一个线程都可以独立地通过ThreadLocal保存与获取自己的变量，而该变量不会受其它线程的影响。")]),a._v(" "),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理：")]),a._v(" "),e("p",[a._v("ThreadLocal维护了一个本地的ThreadLocalMap类型数据，以当前线程为key存储数据。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(' public void set(T value) {\n        Thread t = Thread.currentThread();\n        //使用当前线程作为key\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            map.set(this, value);\n        } else {\n            createMap(t, value);\n        }\n    }\n    \n public T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings("unchecked")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();\n    }\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br")])]),e("h3",{attrs:{id:"threadlocalmap底层实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadlocalmap底层实现"}},[a._v("#")]),a._v(" ThreadLocalMap底层实现：")]),a._v(" "),e("p",[a._v("每个线程中都持有了一个ThreadLocalMap用来存放线程局部变量，而ThreadLocalMap是为了实现ThreadLocal功能特意编写的map类，为什么不用现成的HashMap呢？")]),a._v(" "),e("ol",[e("li",[a._v("ThreadLocalMap中Entry的key设置为了弱引用。防止key的内存泄漏")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("static class ThreadLocalMap {\n    //创建弱引用类型\n    static class Entry extends WeakReference<ThreadLocal<?>> {\n        /** The value associated with this ThreadLocal. */\n        Object value;\n\n        Entry(ThreadLocal<?> k, Object v) {\n            super(k);\n            value = v;\n        }\n    }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("ul",[e("li",[a._v("在使用ThreadLocal的get和set方法时，会进行判断，在碰上key为null的情况会执行replaceStaleEntry（）方法清理调entry。而对于线程复用导致的内存泄漏问题，则可以在执行完毕后调用threadLocal.remove（）方法手动清理。")])])])}),[],!1,null,null,null);s.default=t.exports}}]);