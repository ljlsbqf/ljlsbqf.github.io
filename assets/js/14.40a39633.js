(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{333:function(e,t,r){"use strict";r.r(t);var n=r(6),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"executor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[e._v("#")]),e._v(" Executor")]),e._v(" "),t("blockquote",[t("p",[e._v("executor接口定义了一个提交Runnable对象的接口,用于实现多线程任务的执行")])]),e._v(" "),t("h3",{attrs:{id:"executors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executors"}},[e._v("#")]),e._v(" Executors")]),e._v(" "),t("blockquote",[t("p",[e._v("Executors是一个工具类，定义了一些创建固定线程的方法,内部实现使用ThreadPoolExecutor")])]),e._v(" "),t("h3",{attrs:{id:"类继承关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类继承关系"}},[e._v("#")]),e._v(" 类继承关系")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("graph LR\nExecutorService--\x3eExecutor\nAbstractExecutorService--\x3eExecutorService\nThreadPoolExecutor--\x3eAbstractExecutorService\nForkJoinPool--\x3eAbstractExecutorService\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h4",{attrs:{id:"_1-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-方法"}},[e._v("#")]),e._v(" 1. 方法")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("方法名")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("newFixedThreadPool(int nThreads, ThreadFactory threadFactory)")]),e._v(" "),t("td",[e._v("创建固定数目线程")])]),e._v(" "),t("tr",[t("td",[e._v("newWorkStealingPool(int parallelism)")]),e._v(" "),t("td",[e._v("创建使用ForkJoinPool实现的抢占式线程")])]),e._v(" "),t("tr",[t("td",[e._v("newSingleThreadExecutor()")]),e._v(" "),t("td",[e._v("创建只有一个线程的线程池")])]),e._v(" "),t("tr",[t("td",[e._v("newCachedThreadPool(ThreadFactory threadFactory)")]),e._v(" "),t("td",[e._v("创建无界线程池，池中的线程数可为Integer.MAX_VALUE")])]),e._v(" "),t("tr",[t("td",[e._v("newSingleThreadScheduledExecutor()")]),e._v(" "),t("td",[e._v("创建一个可延迟或定时执行的线程池")])]),e._v(" "),t("tr",[t("td",[e._v("newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)")]),e._v(" "),t("td",[e._v("创建可延迟或定时执行的线程池")])])])]),e._v(" "),t("h4",{attrs:{id:"_1-1-newsinglethreadscheduledexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-newsinglethreadscheduledexecutor"}},[e._v("#")]),e._v(" 1.1 newSingleThreadScheduledExecutor")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n        executorService.schedule(()->{\n            System.out.println("延迟1秒执行");\n        },1, TimeUnit.SECONDS);\n        //执行线程池关闭\nexecutorService.shutdown();\nSystem.out.println("判断线程池是否已经关闭:"+executorService.isShutdown());\n\nexecutorService.scheduleAtFixedRate(()->{\n            System.out.println("定时1秒执行一次");\n        },0,1, TimeUnit.SECONDS);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h4",{attrs:{id:"_1-2-newworkstealingpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-newworkstealingpool"}},[e._v("#")]),e._v(" 1.2 newWorkStealingPool")]),e._v(" "),t("p",[e._v("https://blog.csdn.net/winterking3/article/details/115917125")]),e._v(" "),t("blockquote",[t("p",[e._v("newWorkStealingPool 是Java8添加的线程池。和别的4种不同，它用的是ForkJoinPool。\n使用ForkJoinPool的好处是，把1个任务拆分成多个“小任务”，把这些“小任务”分发到多个线程上执行。这些“小任务”都执行完成后，再将结果合并。\n之前的线程池中，多个线程共有一个阻塞队列，而newWorkStealingPool 中每一个线程都有一个自己的队列。\n当线程发现自己的队列没有任务了，就会到别的线程的队列里获取任务执行。可以简单理解为”窃取“。\n一般是自己的本地队列采取LIFO(后进先出)，窃取时采用FIFO(先进先出)，一个从头开始执行，一个从尾部开始执行，由于偷取的动作十分快速，会大量降低这种冲突，也是一种优化方式。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ExecutorService executorService = Executors.newWorkStealingPool(2);\n        System.out.println(Runtime.getRuntime().availableProcessors());\n        for(int i=0;i<100;i++){\n            executorService.submit(new RunnableTest(""+i));\n        }\n        try {\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        executorService.shutdown();\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h3",{attrs:{id:"executorservice的shutdown和shutdownnow方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executorservice的shutdown和shutdownnow方法"}},[e._v("#")]),e._v(" executorService的shutdown和shutdownnow方法")]),e._v(" "),t("p",[e._v("shutdown 会使 ExecutorService 不再接受新的任务，但是已经 submit 的任务会继续执行\nshutdownNow 会做同样的事，并且会通过中断( interrupt )相关线程来尝试取消已提交的任务，如果提交的任务忽略这个中断( interruption )，那么shutdownNow 方法的表现将和 shutdown 一致。")]),e._v(" "),t("h3",{attrs:{id:"arrayblockingqueue-linkedblockingqueue-synchronousqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrayblockingqueue-linkedblockingqueue-synchronousqueue"}},[e._v("#")]),e._v(" ArrayBlockingQueue LinkedBlockingQueue SynchronousQueue")])])}),[],!1,null,null,null);t.default=s.exports}}]);